extends ../layout/main

block content
  section
    ol
      li 
        p Написать функцию для каррирования (https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5) Пример использования функции
        p const func = (a, b, c, d, e) =&gt; a + b + c + d + e;
        p const hof = yourFunction(func);
        p console.log(hof(1, 2, 3, 4, 5)); // 15
        p console.log(hof(2, 3, 4)(5, 6)); // 20
        p console.log(hof(3, 4)(5, 6)(7)); // 25
        p console.log(hof(4, 5)(6)(7, 8)); // 30
        p console.log(hof(5)(6)(7)(8)(9)); // 35"
      li 
        p Написать функцию сумматор. При вызове функции с&nbsp;аргументами она суммирует переданные значения (полезно прочитать про методы .valueOf и .toString)
        p const sum = function() { /* put your code here */};
        p alert(sum()); // 0;
        p const s = sum();
        p alert(s(1)); // 1
        p alert(s(1)(2)); //3
        p alert(s(3)(4)(5)); // 12
        p const s3 = sum(3);
        p alert(s3(5)); // 8
        p alert(s3(6)); // 9
      li 
        p Реализовать функцию параллельной потоковой обработки данных. В&nbsp;конструктор передается число парралельных &laquo;потоков&raquo;, которое указывает сколько данных обрабатывается в&nbsp;конкретный момент времени
        p const runner = new Parallel(2);
        p console.log(await runner
        p .jobs(
        p () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 10, 1)),
        p () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 50, 2)),
        p () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 20, 3)),
        p () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 90, 4)),
        p () =&gt; new Promise((resolve) =&gt; setTimeout(resolve, 30, 5)),
        p )) // [1, 3, 2, 4, 5];               
      li 
        p Реализовать фукнцию, возвращающую развернутую по&nbsp;спирали матрицу (любой размерности)
        p spiral([
        p [0, 1, 2, 3, 4],
        p [5, 6, 7, 8, 9],
        p [10, 11, 12, 13, 14],
        p [15, 16, 17, 18, 19]
        p ]); // [0, 1, 2, 3, 4, 9, 14, 19, 18, 17, 16, 15, 10, 5, 6, 7, 8, 13, 12, 11]
      li 
        p Реализовать функцию, реализующую сортировку с&nbsp;учетом правил semver
        p semverSort([ &laquo;1.0.5&raquo;, &laquo;2.5.0&raquo;, &laquo;0.12.0&raquo;, &laquo;1&raquo;, &laquo;1.23.45&raquo;, &laquo;1.4.50&raquo;, &laquo;1.2.3.4.5.6.7&raquo;]); // [ &laquo;0.12.0&raquo;, &laquo;1&raquo;, &laquo;1.0.5&raquo;, &laquo;1.2.3.4.5.6.7&raquo;, &laquo;1.4.50&raquo;, &laquo;1.23.45&raquo;, &laquo;2.5.0&raquo; ]